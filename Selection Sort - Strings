import random
import string
import time

def is_valid_length(word):
  """Checks if the word length is between 2 and 7 characters (inclusive).

  Args:
      word: The string to check.

  Returns:
      True if the word length is between 2 and 7, False otherwise.
  """
  return 2 <= len(word) <= 7

def generate_random_words(num_words):
  """Generates a list of random strings with lengths between 2 and 7 characters.

  Args:
      num_words: The number of words to generate.

  Returns:
      A list of random strings.
  """
  words = []
  for _ in range(num_words):
    # Generate a random word with alphanumeric characters
    word = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(random.randint(2, 7)))
    if is_valid_length(word):
      words.append(word)
  return words

def selection_sort_strings(data):
  """Sorts a list of strings using selection sort algorithm.

  Args:
      data: The list of strings to be sorted.

  Returns:
      The sorted list of strings.
  """
  n = len(data)
  for i in range(n):
    # Find the minimum element (lexicographically) in unsorted array
    min_index = i
    for j in range(i + 1, n):
      if data[j] < data[min_index]:
        min_index = j
    # Swap the found minimum element with the first element of unsorted array
    if i != min_index:
      data[i], data[min_index] = data[min_index], data[i]
  return data

def main():
  # Number of words to generate
  num_words = 10000

  # Generate random words with lengths between 2 and 7 characters
  data = generate_random_words(num_words)

  # Start time measurement
  start_time = time.perf_counter()

  # Sort the list using selection sort
  sorted_data = selection_sort_strings(data)

  # End time measurement
  end_time = time.perf_counter()

  # Calculate execution time
  elapsed_time = end_time - start_time

  print(f"Time taken to sort {len(data)} strings (2-7 characters) using selection sort: {elapsed_time:.4f} seconds")

if __name__ == "__main__":
  main()
