import random
import string
import time

def is_valid_length(word):
  """Checks if the word length is between 2 and 7 characters (inclusive).

  Args:
      word: The string to check.

  Returns:
      True if the word length is between 2 and 7, False otherwise.
  """
  return 2 <= len(word) <= 7

def generate_random_words(num_words):
  """Generates a list of random strings with lengths between 2 and 7 characters.

  Args:
      num_words: The number of words to generate.

  Returns:
      A list of random strings containing only lowercase letters and digits.
  """
  words = []
  for _ in range(num_words):
    # Generate a random word with alphanumeric characters
    word = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(random.randint(2, 7)))
    if is_valid_length(word):
      words.append(word)
  return words

def count_sort(arr, exp):
  """Sorts an array of strings based on a specific digit position (character) using counting sort.

  Args:
      arr: The list of strings to be sorted.
      exp: The digit position (index) to sort on (e.g., 0 for units place, 1 for tens place).

  Returns:
      The sorted list of strings.
  """
  n = len(arr)
  output = [""] * n
  count = [0] * 10  # Assuming only digits (0-9)

  # Count occurrences of each digit at the specified position
  for i in range(n):
    index = (ord(arr[i][-exp-1]) - ord('0'))  # Get the character at digit position
    count[index] += 1

  # Calculate cumulative sum (prefix sum) of character counts
  for i in range(1, 10):
    count[i] += count[i - 1]

  # Place strings back in sorted order based on character counts
  i = n - 1
  while i >= 0:
    index = (ord(arr[i][-exp-1]) - ord('0'))
    output[count[index] - 1] = arr[i]
    count[index] -= 1
    i -= 1

  # Copy the sorted elements back to the original array
  for i in range(n):
    arr[i] = output[i]

def radix_sort_strings(data):
  """Sorts a list of strings using radix sort algorithm.

  Args:
      data: The list of strings to be sorted.

  Returns:
      The sorted list of strings.
  """
  max_len = max(len(word) for word in data)  # Find the maximum string length
  for exp in range(max_len - 1, -1, -1):  # Iterate from most significant digit to least
    count_sort(data, exp)  # Sort based on current digit position

  return data

def main():
  # Number of words to generate
  num_words = 10000

  # Generate random words with lengths between 2 and 7 characters
  data = generate_random_words(num_words)

  # Start time measurement
  start_time = time.perf_counter()

  # Sort the list using radix sort
  sorted_data = radix_sort_strings(data)

  # End time measurement
  end_time = time.perf_counter()

  # Calculate execution time
  elapsed_time = end_time - start_time

  print(f"Time taken to sort {len(data)} strings (2-7 characters) using radix sort: {elapsed_time:.4f} seconds")

if __name__ == "__main__":
  main()

