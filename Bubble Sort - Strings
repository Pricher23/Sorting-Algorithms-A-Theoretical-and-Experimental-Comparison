import random
import string
import time

def is_valid_length(word):
  """Checks if the word length is between 2 and 7 characters (inclusive).

  Args:
      word: The string to check.

  Returns:
      True if the word length is between 2 and 7, False otherwise.
  """
  return 2 <= len(word) <= 7

def generate_random_words(num_words):
  """Generates a list of random strings with lengths between 2 and 7 characters.

  Args:
      num_words: The number of words to generate.

  Returns:
      A list of random strings containing only lowercase letters and digits.
  """
  words = []
  for _ in range(num_words):
    # Generate a random word with alphanumeric characters
    word = ''.join(random.choice(string.ascii_lowercase + string.digits) for _ in range(random.randint(2, 7)))
    if is_valid_length(word):
      words.append(word)
  return words

def bubble_sort_strings(data):
  """Sorts a list of strings using bubble sort algorithm.

  Args:
      data: The list of strings to be sorted.

  Returns:
      The sorted list of strings.
  """
  n = len(data)
  swapped = True
  while swapped:
    swapped = False
    for i in range(n - 1):
      if data[i] > data[i + 1]:  # Compare strings lexicographically
        data[i], data[i + 1] = data[i + 1], data[i]
        swapped = True
  return data

def main():
  # Number of words to generate
  num_words = 10000

  # Generate random words with lengths between 2 and 7 characters
  data = generate_random_words(num_words)

  # Start time measurement
  start_time = time.perf_counter()

  # Sort the list using bubble sort
  sorted_data = bubble_sort_strings(data)

  # End time measurement
  end_time = time.perf_counter()

  # Calculate execution time
  elapsed_time = end_time - start_time

  print(f"Time taken to sort {len(data)} strings (2-7 characters) using bubble sort: {elapsed_time:.4f} seconds")

if __name__ == "__main__":
  main()

