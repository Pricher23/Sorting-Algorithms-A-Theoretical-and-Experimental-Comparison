import random
import string
import time

def is_valid_length(word):
  """Checks if the word length is between 2 and 7 characters (inclusive).

  Args:
      word: The string to check.

  Returns:
      True if the word length is between 2 and 7, False otherwise.
  """
  return 2 <= len(word) <= 7

def generate_random_words(num_words):
  """Generates a list of random strings with lengths between 2 and 7 characters.

  Args:
      num_words: The number of words to generate.

  Returns:
      A list of random strings.
  """
  words = []
  for _ in range(num_words):
    # Generate a random word with alphanumeric characters
    word = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(random.randint(2, 7)))
    if is_valid_length(word):
      words.append(word)
  return words

def partition(data, low, high):
  """Partitions a list around a pivot element.

  Args:
      data: The list to be partitioned.
      low: The lower index of the sub-array to partition.
      high: The higher index of the sub-array to partition.

  Returns:
      The index of the pivot element after partitioning.
  """
  pivot = data[high]
  i = low - 1

  for j in range(low, high):
    if data[j] <= pivot:
      i += 1
      data[i], data[j] = data[j], data[i]
  data[i + 1], data[high] = data[high], data[i + 1]
  return i + 1

def quick_sort(data, low, high):
  """Sorts a list using quick sort algorithm.

  Args:
      data: The list to be sorted.
      low: The lower index of the sub-array to sort.
      high: The higher index of the sub-array to sort.
  """
  if low < high:
    # pi is partitioning index, data[p] is now at right place
    pi = partition(data, low, high)

    # Recursively sort elements before and after partition
    quick_sort(data, low, pi - 1)
    quick_sort(data, pi + 1, high)

def main():
  # Number of words to generate
  num_words = 10000

  # Generate random words with lengths between 2 and 7 characters
  data = generate_random_words(num_words)

  # Start time measurement
  start_time = time.perf_counter()

  # Sort the list using quick sort
  quick_sort(data, 0, len(data) - 1)

  # End time measurement
  end_time = time.perf_counter()

  # Calculate execution time
  elapsed_time = end_time - start_time

  print(f"Time taken to sort {len(data)} strings (2-7 characters) using quick sort: {elapsed_time:.4f} seconds")

if __name__ == "__main__":
  main()
